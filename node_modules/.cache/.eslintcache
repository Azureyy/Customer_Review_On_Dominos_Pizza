[{"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/index.js":"1","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/App.js":"2","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/reportWebVitals.js":"3","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/HomePage.js":"4","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/NavBar.js":"5","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/About.js":"6","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/UserNLP.js":"7"},{"size":500,"mtime":1639278016000,"results":"8","hashOfConfig":"9"},{"size":800,"mtime":1639278016000,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1639278016000,"results":"11","hashOfConfig":"9"},{"size":5098,"mtime":1639278016000,"results":"12","hashOfConfig":"9"},{"size":1202,"mtime":1639278016000,"results":"13","hashOfConfig":"9"},{"size":2468,"mtime":1639278016000,"results":"14","hashOfConfig":"9"},{"size":8348,"mtime":1639278016000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w64j6l",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/index.js",[],"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/App.js",[],"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/reportWebVitals.js",[],"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/HomePage.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"],"import React, { useState, useEffect } from \"react\";\n\nconst HomePage = () => {\n  const [score, setScore] = useState(null);\n  const [tweets, setTweets] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://pro-792c7-default-rtdb.firebaseio.com/stream.json\")\n      .then((res) => res.json())\n      .then((data) => {\n        setTweets([[data['text'], calculateSince(data['created_at']), data['senti_val']],...tweets]);//subject to change\n        console.log(\"set tweet; \", data[\"text\"]);\n      });\n  },[]);\n\n  useEffect(() => {\n    fetch(\"/dominoScore\")\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"set score state: \", data.toString());\n        setScore(data.toString())\n        console.log(\"stored score state: \", data);\n      });\n  },[]);\n\n\n  function calculateSince(datetime)\n  {\n      var tTime=new Date(datetime);\n      var cTime=new Date();\n      var sinceMin=Math.round((cTime-tTime)/60000);\n      if(sinceMin===0)\n      {\n          var sinceSec=Math.round((cTime-tTime)/1000);\n          if(sinceSec<10)\n            var since ='less than 10 seconds ago';\n          else if(sinceSec<20)\n            var since ='less than 20 seconds ago';\n          else\n            var since ='half a minute ago';\n      }\n      else if(sinceMin===1)\n      {\n          var sinceSec=Math.round((cTime-tTime)/1000);\n          if(sinceSec==30)\n            var since='half a minute ago';\n          else if(sinceSec<60)\n            var since='less than a minute ago';\n          else\n            var since='1 minute ago';\n      }\n      else if(sinceMin<45)\n          var since=sinceMin+' minutes ago';\n      else if(sinceMin>44&&sinceMin<60)\n          var since='about 1 hour ago';\n      else if(sinceMin<1440){\n          var sinceHr=Math.round(sinceMin/60);\n          if(sinceHr===1)\n            var since='about 1 hour ago';\n          else\n            var since='about '+sinceHr+' hours ago';\n      }\n      else if(sinceMin>1439&&sinceMin<2880)\n          var since='1 day ago';\n      else\n      {\n          var sinceDay=Math.round(sinceMin/1440);\n          var since=sinceDay+' days ago';\n      }\n      return since;\n  };\n\n  const tweetList = tweets.map( tweet => {\n    return (\n      <a class=\"list-group-item list-group-item-action flex-column align-items-start \">\n      <div class=\"d-flex w-100 justify-content-between\">\n         {tweet[2] >= 0 ? (<h5 class=\"mb-1\">Sentiment: Positive</h5>) : (<h5 class=\"mb-1\">Sentiment: Negative</h5>)}\n        <small>{tweet[1]}</small>\n      </div>\n      <p class=\"mb-1\">\n        {tweet[0]}\n      </p>\n    </a>\n\n    )\n  }\n  )\n\n  return (\n    <div>\n      <header class=\"masthead bg-primary text-white text-center\">\n        <div class=\"container d-flex align-items-center flex-column\">\n          <img\n            class=\"masthead-avatar mb-5\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Dominos_pizza_logo.svg/1200px-Dominos_pizza_logo.svg.png\"\n            alt=\"dominos_logo\"\n          />\n\n          <div>\n            <h1 class=\"masthead-heading text-uppercase mb-0\">\n              {!score && <div><i class=\"fas fa-sync fa-spin\"></i></div>}\n              {score ? score  : null}/5\n            </h1>\n          </div>\n\n          <h3>Sentiment Score</h3>\n\n          <div class=\"divider-custom divider-light\">\n            <div class=\"divider-custom-icon\">\n              {score === 1 ? <i class=\"fas fa-star\"></i> : null}\n              {score === 2 ? (\n                <div>\n                  {\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>\n                </div>\n              ) : null}\n              {score === 3 ? (\n                <div>\n                  {\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>{\" \"}\n                  <i class=\"fas fa-star\"></i>\n                </div>\n              ) : null}\n              {score === 4 ? (\n                <div>\n                  {\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>{\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>\n                </div>\n              ) : null}\n              {score === 5 ? (\n                <div>\n                  {\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>{\" \"}\n                  <i class=\"fas fa-star\"></i> <i class=\"fas fa-star\"></i>{\" \"}\n                  <i class=\"fas fa-star\"></i>\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <p class=\"masthead-subheading font-weight-light mb-0\">\n            {\" \"}\n            Based on tweets that contains @dominos for the past week,\n            generating in real-time\n          </p>\n        </div>\n      </header>\n      <div class=\"page-section-half\"></div>\n      \n      <div class=\"container d-flex align-items-center flex-column\">\n      {tweets.length !== 0 && <h3>Latest Tweets that Contains @Dominos</h3>}\n      <div class = \"page-section-little\"></div>\n            {tweetList}\n      </div>\n      <div class=\"page-section-half\"></div>\n    </div>\n    \n  );\n};\n\nexport default HomePage;\n","/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/NavBar.js",[],"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/About.js",[],"/Users/azure/Downloads/Dominos_Tweets_Analysis_Webapp-main/src/Components/UserNLP.js",["47"],"import React, { useState, useEffect } from \"react\";\n\n\nconst UserNLP = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [step1Completed, setStep1Completed] = useState(null);\n  const [metadata, setMetadata] = useState(null);\n  const [imgUrl, setImgUrl] = useState(null);\n  const [step2Completed, setStep2Completed] = useState(null);\n  const [userScore, setUserScore] = useState(null);\n  const [step3Completed, setStep3Completed] = useState(true)\n  \n\n  useEffect(\n      () => {\n      setStep3Completed(true);\n    },[userScore]);\n\n  const handleSubmitFile = (e) => {\n    e.preventDefault();\n    console.log('uploaded',selectedFile);\n    const fileReader = new FileReader();\n    fileReader.readAsText(e.target.files[0], \"UTF-8\");\n    fileReader.onload = (e) => {\n      setSelectedFile(e.target.result);\n    };\n  };\n\n  const handleCompleteStep1 = (e) => {\n    e.preventDefault();\n    setStep1Completed(true);\n    console.log(\"step1 complete\",selectedFile)\n  };\n\n  //functions for step2\n  function getMeta(url) {\n    const img = new Image();\n    img.addEventListener(\"load\", function () {\n      alert(\n        \"The size of the uploaded image is \" +\n          this.naturalWidth +\n          \" X \" +\n          this.naturalHeight\n      );\n    });\n    img.src = url;\n  }\n\n  function memorySizeOf(obj) {\n    var bytes = 0;\n    function sizeOf(obj) {\n      if (obj !== null && obj !== undefined) {\n        // eslint-disable-next-line default-case\n        switch (typeof obj) {\n          case \"number\":\n            bytes += 8;\n            break;\n          case \"string\":\n            bytes += obj.length * 2;\n            break;\n          case \"boolean\":\n            bytes += 4;\n            break;\n          case \"object\":\n            var objClass = Object.prototype.toString.call(obj).slice(8, -1);\n            if (objClass === \"Object\" || objClass === \"Array\") {\n              for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) continue;\n                sizeOf(obj[key]);\n              }\n            } else bytes += obj.toString().length * 2;\n            break;\n        }\n      }\n      return bytes;\n    }\n\n    function formatByteSize(bytes) {\n      if (bytes < 1024) return bytes + \" bytes\";\n      else if (bytes < 1048576) return (bytes / 1024).toFixed(3) + \" KiB\";\n      else if (bytes < 1073741824) return (bytes / 1048576).toFixed(3) + \" MiB\";\n      else return (bytes / 1073741824).toFixed(3) + \" GiB\";\n    }\n\n    return formatByteSize(sizeOf(obj));\n  }\n\n  const handleReadMetaData = (e) => {\n    e.preventDefault();\n    console.log(selectedFile);\n    const JSONfile = JSON.parse(selectedFile);\n    const firstline = JSONfile[0];\n    //extracting attributes\n    const attributes = 1;\n    const filesize = memorySizeOf(selectedFile);\n\n    //setting output hashmap\n    const output = new Map();\n    output.set(\n      \"firstFiveLines\",\n      JSON.stringify({\"0\":JSONfile[0],\"1\":JSONfile[1], \"2\":JSONfile[2],\"3\":JSONfile[3], \"4\":JSONfile[4]},null,'\\t')\n    );\n    output.set(\"numOfAttributes\", attributes);\n    output.set(\"numOfRows\", Object.keys(JSONfile).length);\n    output.set(\"filesize\", filesize);\n    setMetadata(output);\n\n    console.log('metadata', metadata);\n    setStep2Completed(true);\n  };\n\n  //functions for step 3\n\n  const handleGetScore = (e) => {\n    e.preventDefault();\n    setStep3Completed(false);\n    fetch('/getUserScore',{\n        method: 'POST',\n        body: selectedFile\n      }).then(\n        res => res.json()\n      ).then(\n        data => {\n          console.log('User Score: ', data);\n          setUserScore(parseFloat(data[\"score\"]))\n        })   \n  };\n\n  return (\n    <div>\n      <header class=\"masthead bg-primary text-white text-center\">\n        <section class=\"page-section portfolio\" id=\"portfolio\">\n          <div class=\"container\">\n            <div>\n              <h2 class=\"page-section-heading text-center text-uppercase mb-0\">\n                Check Sentiment with Your Own Data\n              </h2>\n            </div>\n\n            <div class=\"divider-custom page-section\">\n              <div class=\"divider-custom-line\"></div>\n              <div class=\"divider-custom-icon\">\n                <h3>Step 1 : Upload Your Data</h3>\n              </div>\n              <div class=\"divider-custom-line\"></div>\n            </div>\n            <div class=\"text-center mt-4 center-block\">\n              <input\n                type=\"file\"\n                class=\"justify-content-center\"\n                onChange={handleSubmitFile}\n              />\n              <button onClick={handleCompleteStep1} class=\"btn btn-secondary \">\n                {\" \"}\n                <i class=\"fas fa-upload me-2\"></i>Upload\n              </button>\n            </div>\n            {step1Completed && (\n              <div class=\"text-center mt-4 center-block\">\n                <i\n                  class=\"fas fa-check-circle fa-2x\"\n                  style={{ color: \"#A52A2A\" }}\n                ></i>{\" \"}\n                <p style={{ color: \"#A52A2A\" }}>Completed</p>\n              </div>\n            )}\n\n\n            <div class=\"divider-custom page-section\">\n              <div class=\"divider-custom-line\"></div>\n              <div class=\"divider-custom-icon\">\n                <h3>Step 2 : Feature Extraction</h3>\n              </div>\n              <div class=\"divider-custom-line\"></div>\n            </div>\n            <div class=\"divider-custom text-center mt-4 center-block\">\n              <button\n                onClick={handleReadMetaData}\n                type=\"button\"\n                class=\"btn btn-secondary\"\n              >\n                <i class=\"fas fa-database me-2\"></i> Conduct Feature Extraction\n              </button>\n            </div>\n            <div class=\"divider-custom\">\n              <p>\n                Number of Attributes :{\" \"}\n                {step2Completed && metadata.get(\"numOfAttributes\")}\n              </p>\n            </div>\n            <div class=\"divider-custom\">\n              <p>\n                Number of Rows : {step2Completed && metadata.get(\"numOfRows\")}\n              </p>\n            </div>\n            <div class=\"divider-custom\">\n              <p> File Size : {step2Completed && metadata.get(\"filesize\")}</p>\n              \n            </div>\n\n            <p> Data Preview :</p>\n            <div class=\"divider-custom\">\n            <pre id=\"json\">{step2Completed && metadata.get(\"firstFiveLines\")}</pre>\n            </div>\n            <p> Image Size : </p>\n            <div class=\"divider-custom\">\n              {step2Completed && getMeta('')}\n                    <input class=\"form-control\" onChange={(e)=> setImgUrl(e.target.value)} type=\"text\" placeholder=\" Enter an image url and a popup message will show up !\"/>\n                    <input class=\"btn btn-secondary\" onClick={()=> getMeta(imgUrl)} value=\"Submit\" />\n            </div>\n            {step2Completed && (\n              <div class=\"text-center mt-4 center-block\">\n                <i\n                  class=\"fas fa-check-circle fa-2x\"\n                  style={{ color: \"#A52A2A\" }}\n                ></i>{\" \"}\n                <p style={{ color: \"#A52A2A\" }}>Completed</p>\n              </div>\n            )}\n\n\n            <div class=\"divider-custom page-section\">\n              <div class=\"divider-custom-line\"></div>\n              <div class=\"divider-custom-icon\">\n                <h3>Step 3 : Get sentiment from your Twitter Data! </h3>\n              </div>\n              <div class=\"divider-custom-line\"></div>\n            </div>\n            <div class=\"divider-custom row justify-content-center\">\n              <div class=\"divider-custom text-center mt-4 center-block\">\n                <button\n                  onClick={handleGetScore}\n                  type=\"button\"\n                  class=\"btn btn-secondary\"\n                >\n                  <i class=\"fas fa-rocket me-2\"></i> Get Result\n                </button>\n              </div>\n            </div>\n            <div class=\"divider-custom\">\n              <p> \n                Sentiment from your Tweets :\n                { step3Completed === false && <div><i class=\"fas fa-sync fa-spin\"></i></div> } \n                { typeof userScore !== undefined &&  <h1>{userScore}/5</h1>}\n                \n              </p>\n            </div>\n          </div>\n        </section>\n      </header>\n    </div>\n  );\n};\n\nexport default UserNLP;\n",{"ruleId":"48","severity":1,"message":"49","line":14,"column":5,"nodeType":"50","endLine":14,"endColumn":7,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":38,"column":17,"nodeType":"54","messageId":"55","endLine":38,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":40,"column":17,"nodeType":"54","messageId":"55","endLine":40,"endColumn":22},{"ruleId":"52","severity":1,"message":"56","line":44,"column":15,"nodeType":"54","messageId":"55","endLine":44,"endColumn":23},{"ruleId":"57","severity":1,"message":"58","line":45,"column":22,"nodeType":"59","messageId":"60","endLine":45,"endColumn":24},{"ruleId":"52","severity":1,"message":"53","line":46,"column":17,"nodeType":"54","messageId":"55","endLine":46,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":48,"column":17,"nodeType":"54","messageId":"55","endLine":48,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":50,"column":17,"nodeType":"54","messageId":"55","endLine":50,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":53,"column":15,"nodeType":"54","messageId":"55","endLine":53,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":55,"column":15,"nodeType":"54","messageId":"55","endLine":55,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":59,"column":17,"nodeType":"54","messageId":"55","endLine":59,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":61,"column":17,"nodeType":"54","messageId":"55","endLine":61,"endColumn":22},{"ruleId":"52","severity":1,"message":"53","line":64,"column":15,"nodeType":"54","messageId":"55","endLine":64,"endColumn":20},{"ruleId":"52","severity":1,"message":"53","line":68,"column":15,"nodeType":"54","messageId":"55","endLine":68,"endColumn":20},{"ruleId":"61","severity":1,"message":"62","line":75,"column":7,"nodeType":"63","endLine":75,"endColumn":88},{"ruleId":"64","severity":1,"message":"65","line":92,"column":11,"nodeType":"54","messageId":"66","endLine":92,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tweets'. Either include it or remove the dependency array. You can also do a functional update 'setTweets(t => ...)' if you only need 'tweets' in the 'setTweets' call.","ArrayExpression",["67"],"no-redeclare","'since' is already defined.","Identifier","redeclared","'sinceSec' is already defined.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'firstline' is assigned a value but never used.","unusedVar",{"desc":"68","fix":"69"},"Update the dependencies array to be: [tweets]",{"range":"70","text":"71"},[500,502],"[tweets]"]